# Ruff style: Compliant
# Description:
# This module handles parsing of metadata files generated by the microscope.

import configparser
import os
import re
from pathlib import Path
from typing import Any


def parse_settings(settings_path: str | Path) -> dict[str, Any] | None:
    """
    Detects the microscope type from the settings file and calls the
    appropriate parser.
    """
    with open(settings_path, encoding="utf-8") as f:
        content = f.read()

    if '"saveNamePrefix"' in content:
        print("  - Detected OPM metadata file.")
        return _parse_opm_settings(settings_path, content)
    elif "***** ***** *****" in content:
        print("  - Detected LLSM metadata file.")
        return _parse_llsm_settings(settings_path, content)
    else:
        print("  - Unknown metadata file format.")
        return None


def _parse_opm_settings(
    settings_path: str | Path, raw_text: str
) -> dict[str, Any] | None:  # noqa: E501
    """Parses OPM AcqSettings.txt file."""
    try:
        dx = 0.136
        dz_match = re.search(r'"stepSizeUm":\s*([\d\.]+)', raw_text)
        if not dz_match:
            raise ValueError("'stepSizeUm' not found in AcqSettings.txt")
        dz = float(dz_match.group(1))

        timepoint_match = re.search(r'"timepointInterval":\s*([\d\.]+)', raw_text)
        timepoint_interval = (
            float(timepoint_match.group(1)) if timepoint_match else None
        )

        prefix_match = re.search(r'"saveNamePrefix":\s*"([^"]+)"', raw_text)
        if not prefix_match:
            raise ValueError("'saveNamePrefix' not found in AcqSettings.txt")
        save_name_prefix = prefix_match.group(1)

        rois = [
            (657, 1161, 1224, 2262),  # ch0 (cam1) & ch1 (cam2)
            (1296, 1800, 1224, 2262),  # ch2 (cam1) & ch3 (cam2)
        ]

        params = {
            "microscope": "OPM",
            "dx": dx,
            "voxel_size_z": dz,
            "save_name_prefix": save_name_prefix,
            "timepoint_interval": timepoint_interval,
            "angle": 31.5,
            "rois": rois,
        }
        print(f"  - Successfully parsed OPM metadata from {settings_path}")
        return params

    except Exception as e:
        print(f"  - Warning: Could not read or parse OPM AcqSettings.txt: {e}")
        return None


def _parse_llsm_settings(
    settings_path: str | Path, raw_text: str
) -> dict[str, Any] | None:  # noqa: E501
    """Parses LLSM Settings.txt file, based on llspy logic."""
    try:
        cp = configparser.ConfigParser(strict=False)
        # The following line is correct for making options case-sensitive.
        # We ignore the Pylance error as it's a known type-checker limitation.
        cp.optionxform = str  # type: ignore[assignment]
        cp.read_string(raw_text.split("***** ***** *****")[-1])

        angle = cp.getfloat("Sample stage", "Angle between stage and bessel beam (deg)")

        z_motion_match = re.search(r"Z motion\s*:\s*(.*)", raw_text)
        if not z_motion_match:
            raise ValueError("'Z motion' key not found in settings file")
        z_motion = z_motion_match.group(1)

        if "Sample piezo" in z_motion:
            dz_line = re.search(
                (
                    r"S PZT Offset, Interval \(um\), # of Pixels for Excitation \(0\)"
                    r"\s*:\s*[\d\.]+\s+([\d\.]+)"
                ),
                raw_text,
            )
        else:
            dz_line = re.search(
                (
                    r"Z PZT Offset, Interval \(um\), # of Pixels for Excitation \(0\)"
                    r"\s*:\s*[\d\.]+\s+([\d\.]+)"
                ),
                raw_text,
            )

        if not dz_line:
            raise ValueError("Could not find Z-step interval in settings file")
        dz = float(dz_line.group(1))

        magnification = cp.getfloat("Detection optics", "Magnification")
        camera_pixel_size = 6.5
        dx = round(camera_pixel_size / magnification, 4)

        # The basename for LLSM files is the part before the camera and channel info
        save_name_prefix = os.path.basename(settings_path).split("_Settings.txt")[0]

        params = {
            "microscope": "LLSM",
            "dx": dx,
            "voxel_size_z": dz,
            "save_name_prefix": save_name_prefix,
            "timepoint_interval": None,
            "angle": angle,
            "rois": None,  # LLSM files are pre-split, no ROIs needed
        }
        print(f"   - Successfully parsed LLSM metadata from {settings_path}")
        return params

    except Exception as e:
        print(f"   - Warning: Could not read or parse LLSM Settings.txt: {e}")
        return None
