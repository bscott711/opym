# Ruff style: Compliant
# Description:
# This module handles parsing of metadata files generated by the microscope.

import os
import re
from typing import Any


def parse_acq_settings(settings_path: str) -> dict[str, Any] | None:
    """
    Parses the text-formatted AcqSettings.txt file to extract key
    experimental parameters.
    """
    if not os.path.exists(settings_path):
        print(f"Info: Metadata file not found at {settings_path}")
        return None

    try:
        with open(settings_path, encoding="utf-8") as f:
            raw_text = f.read()

        # --- Use empirically measured pixel size ---
        dx = 0.136

        # --- Extract dz (stepSizeUm) ---
        dz_match = re.search(r'"stepSizeUm":\s*([\d\.]+)', raw_text)
        if not dz_match:
            raise ValueError("'stepSizeUm' not found in AcqSettings.txt")
        dz = float(dz_match.group(1))

        # --- Extract timepointInterval ---
        timepoint_match = re.search(r'"timepointInterval":\s*([\d\.]+)', raw_text)
        timepoint_interval = (
            float(timepoint_match.group(1)) if timepoint_match else None
        )

        # --- Extract saveNamePrefix ---
        prefix_match = re.search(r'"saveNamePrefix":\s*"([^"]+)"', raw_text)
        if not prefix_match:
            raise ValueError("'saveNamePrefix' not found in AcqSettings.txt")
        save_name_prefix = prefix_match.group(1)

        # --- Extract saveDirectoryRoot ---
        dir_root_match = re.search(r'"saveDirectoryRoot":\s*"([^"]+)"', raw_text)
        save_directory_root = dir_root_match.group(1) if dir_root_match else None

        params = {
            "dx": dx,
            "voxel_size_z": dz,
            "save_name_prefix": save_name_prefix,
            "timepoint_interval": timepoint_interval,
            "save_directory_root": save_directory_root,
        }
        print(f"Successfully parsed metadata from {settings_path}")
        return params

    except Exception as e:
        print(f"Warning: Could not read or parse AcqSettings.txt: {e}")
        return None
